configurations {
    jaxb
}


buildscript {
    repositories {
        maven { url "http://repo.spring.io/libs-snapshot" }
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.0.2.RELEASE")
    }
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'


repositories {
    mavenCentral()
    maven { url 'http://repo.spring.io/libs-snapshot' }
}


ext{
	// This is the URL to the WSDL JAXB2 will read to generate the types needed
	// to call the service
	wsdlURL = 'http://wsf.cdyne.com/WeatherWS/Weather.asmx?wsdl'

	// This is the package namespace where JAXB2 will place generated sources
	// from the above WSDL
	genPackage = 'coyote.wx'
}


task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "${wsdlURL}"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", 
            		classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, 
            		schema: schema,
                    package: "${genPackage}") {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.7, target: 1.7, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.ws:spring-ws-core:2.1.4.RELEASE")
    compile(files(genJaxb.classesDir).builtBy(genJaxb))

    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"
}


jar {
	from genJaxb.classesDir
}


task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}


task afterEclipseImport {
    dependsOn genJaxb
}
